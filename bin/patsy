#!/usr/bin/env node

/*jslint node: true */
'use strict';

/**
 * Require file system plugin from node
 *
 * @var     Object
 * @source  NodeJS
 */
var fs            = require('fs');
/**
 * Require util plugin from node
 *
 * @var     Object
 * @source  NodeJS
 */
var util          = require('util');

/**
 * Require path plugin from node
 *
 * @var     Object
 * @source  NodeJS
 */
var path          = require('path');

/**
 * Require colors plugin from node
 *
 * @var     Object
 * @source  NodeJS
 */
var program       = require('commander');

process.on('uncaughtException', function (error) {

  console.log('>> EXCEPTION'.red + ':', error);

  process.exit(1);
});


/**
 * Varholder for package.json
 *
 * @var     Object
 */
var pjson = require('../package.json');

var command = '';
var action  = '';

var option  = '';

// All options are not fully implemented or implemented at all, YMMV!
program
  .version(pjson.version)
  .option('-v, --verbose',        'output every log and debug statement from patsy. this will override the configuration setting!')
  .option('-d, --default-config', 'set patsy to just use the default configuration file')
  .option('-s, --scripture',      'no output from King Arthur, Patsy or God')
  .option('-D, --debug',          'set debug to true')
  .option('-f, --force',          'force through the flow even when warnings are thrown')
  .option('-nb, --no-build',      'start patsy without build system')
  .option('-np, --no-proxy',      'start patsy without proxy setup')
  .option('-nt, --no-test',       'start patsy without tests')
  .option('-nl, --no-lint',       'start patsy without linting');

program
  .command('init')
  .description('initialize patsy with default configuration')
  .action(function(){
    command = 'init';

  });

program
  .command('test')
  .description('run a test of patsy')
  .action(function(){
    command = 'test';

  });

program
  .command('task [how]')
  .description('run patsy task(s). [all/<task>]')
  .action(function(how){

    command = 'task';
    action  = how;

  });



program.parse(process.argv);

var patsy = require('../lib/patsy')({
  verbose : program.verbose,
  scripture : program.scripture,
  app_path : path.resolve(__dirname, '..') + path.sep
});

// If no commands are given, start patsy
if(command === ''){
  try{
    patsy.start();
  } catch(e){
    console.log('>> EXCEPTION'.red + ':', e.code ? e.code : e);
  }

} else if(command == 'task'){
  patsy.runGruntTasks(action);
} else if(command == 'test'){
  patsy.runPatsyTest();
} else if(command === 'init'){

  patsy.init();

  var preScripture = [];
  preScripture.push('[Patsy]'.yellow + ": What's this parchment lying on the ground? <picks up parchment>");

  try{
    patsy.start(preScripture);
  } catch(e){
    console.log('>> EXCEPTION'.red + ':', e.code ? e.code : e);
  }

}
